generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Supervisor {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  hash      String
  role      String   @default("supervisor")

  /// one-to-many: a supervisor **has many** agents
  agents    Agent[]  @relation("AgentSupervisor")

  /// existing back-relations
  auditLogs      AuditLog[]      @relation("SupervisorAuditEntries")
  attendanceLogs AttendanceLog[] @relation("SupervisorAttendance")
}

model Agent {
  id          Int      @id @default(autoincrement())
  fullName    String
  email       String?  @unique
  hash        String?
  phone       String?
  role        String?
  standbyFlag Boolean  @default(false)

  /// HR metadata
  employeeNo  String?   @map("employee_no")
  startDate   DateTime? @map("start_date")
  address     String?
  province    String?

  /// FK to Supervisor (nullable = can be un-assigned)
  supervisorId Int?     @map("supervisor_id")
  supervisor   Supervisor? @relation("AgentSupervisor", fields:[supervisorId], references:[id])

  /// existing back-relations
  engagements   Engagement[]
  shifts        Shift[]
  leave         Leave[]
  auditEntries  AuditLog[] @relation("AgentAuditEntries")

  @@map("Agent")
}

model Shift {
  id         Int       @id @default(autoincrement())
  agentId    Int?
  agent      Agent?    @relation(fields: [agentId], references: [id])

  shiftDate  DateTime  @db.Date
  startAt    DateTime
  endAt      DateTime

  breakStart DateTime?
  breakEnd   DateTime?

  generatedBy String?  @default("solver")

  // leave auto-flag (Feature 3)
  leaveId   Int?                                       // ← NEW
  leave     Leave?     @relation(fields: [leaveId], references: [id])

  attendance AttendanceLog?
}

model Leave {
  id          Int      @id @default(autoincrement())
  agentId     Int
  agent       Agent    @relation(fields: [agentId], references: [id])

  reason      String
  startsAt    DateTime
  endsAt      DateTime
  createdAt   DateTime @default(now())
  createdBy   String

  shifts      Shift[]                               // ← NEW
}

model Duty {
  id   Int    @id @default(autoincrement())
  name String @unique

  logs AttendanceLog[]
}

model AttendanceLog {
  id      Int   @id @default(autoincrement())
  shiftId Int   @unique
  shift   Shift @relation(fields: [shiftId], references: [id])

  status        Status    @default(pending)
  checkIn       DateTime?
  lunchStart    DateTime?
  lunchEnd      DateTime?
  overtimeStart DateTime?
  overtimeEnd   DateTime?

  dutyId       Int?
  duty         Duty?       @relation(fields: [dutyId], references: [id])

  supervisorId Int?
  supervisor   Supervisor? @relation("SupervisorAttendance", fields: [supervisorId], references: [id])
}

model VolumeForecast {
  id              Int      @id @default(autoincrement())
  role            String
  date            DateTime @db.Date
  hour            Int
  expectedCalls   Int
  expectedTickets Int
  priority1         Int      @default(0)
  autoDfaLogged     Int      @map("auto_dfa_logged")    @default(0)
  autoMntLogged     Int      @map("auto_mnt_logged")    @default(0)
  autoOutageLinked  Int      @map("auto_outage_linked") @default(0)
  autoMntSolved     Int       @default(0)
}

model VolumeActual {
  id      Int      @id @default(autoincrement())
  role    String
  date    DateTime @db.Date
  hour    Int
  calls   Int
  tickets Int
  priority1          Int       @default(0)
  autoDfaLogged      Int       @map("auto_dfa_logged")     @default(0)
  autoMntLogged      Int       @map("auto_mnt_logged")     @default(0)
  autoOutageLinked   Int       @map("auto_outage_linked")  @default(0)
  autoMntSolved      Int       @default(0)

  @@unique([date, hour])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  action      String
  actor       String
  payload     Json
  createdAt   DateTime @default(now())

  // bidirectional links – optional
  agentId      Int?                                           // ← NEW
  agent        Agent?      @relation("AgentAuditEntries",       fields: [agentId],      references: [id])

  supervisorId Int?                                           // ← NEW
  supervisor   Supervisor? @relation("SupervisorAuditEntries", fields: [supervisorId], references: [id])
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  engagements Engagement[]
  vacancies   Vacancy[]
}

model Engagement {
  id        Int      @id @default(autoincrement())
  agentId   Int
  agent     Agent    @relation(fields:[agentId], references:[id])

  teamId    Int
  team      Team     @relation(fields:[teamId], references:[id])

  startDate DateTime           @db.Date        // first day on team
  endDate   DateTime?          @db.Date        // null means still active
  note      String?

  createdAt DateTime @default(now())

  @@index([teamId, startDate, endDate])
}

enum VacancyStatus {
  OPEN
  AWAITING_APPROVAL
  APPROVED
  INTERVIEWING
  OFFER_SENT
  OFFER_ACCEPTED
  CLOSED
  PENDING
}

model Vacancy {
  id        Int   @id @default(autoincrement())

  // FKs
  teamId    Int   @map("team_id")
  team      Team  @relation(fields: [teamId], references: [id])

  // Core dates
  openFrom  DateTime @map("open_from")
  closedAt  DateTime? @map("closed_at")

  // Status tracking
  status    VacancyStatus @default(OPEN)

  // Candidate offer pipeline
  candidateName    String?   @map("candidate_name")
  candidateEmail   String?   @map("candidate_email")
  offerSentAt      DateTime? @map("offer_sent_at")
  offerAcceptedAt  DateTime? @map("offer_accepted_at")
  startDate        DateTime? @map("start_date")

  // Optional free-text
  reason     String?  @db.VarChar(250)

  @@map("Vacancy")          // ← actual table name
  @@index([teamId])
  @@index([status])
  @@index([openFrom])
}

enum Status {
  pending
  present
  late
  no_show
  off_sick
  emergency_leave
  awol
}

model Circuit {
  id               Int      @id @default(autoincrement())
  circuitId        String   @unique @map("circuit_id")
  nodeA            String   @map("node_a")
  nodeB            String   @map("node_b")
  nodeALat         Float?   @map("node_a_lat")
  nodeALon         Float?   @map("node_a_lon")
  nodeBLat         Float?   @map("node_b_lat")
  nodeBLon         Float?   @map("node_b_lon")
  techType         String   @map("tech_type")
  currentRxSiteA   Float?   @map("current_rx_site_a")
  currentRxSiteB   Float?   @map("current_rx_site_b")
  nldGroup         String?  @map("nld_group")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt      @map("updated_at")

  levelHistory     CircuitLevelHistory[]
  lightEvents      LightLevelEvent[]
  dailyLevels      DailyLightLevel[]
}

model CircuitLevelHistory {
  id          Int      @id @default(autoincrement())
  circuit     Circuit  @relation(fields: [circuitId], references: [id])
  circuitId   Int      @map("circuit_id")
  rxSiteA     Float?   @map("rx_site_a")
  rxSiteB     Float?   @map("rx_site_b")
  reason      String
  source      String
  changedById Int?     @map("changed_by_id")
  changedAt   DateTime @map("changed_at")
}

model LightLevelEvent {
  id            Int      @id @default(autoincrement())
  circuit       Circuit  @relation(fields: [circuitId], references: [id])
  circuitId     Int      @map("circuit_id")
  ticketId      Int?     @map("ticket_id")
  impactType    String?  @map("impact_type")
  eventDate     DateTime?@map("event_date")
  sideAPrev     Float?   @map("side_a_prev")
  sideACurr     Float?   @map("side_a_curr")
  sideBPrev     Float?   @map("side_b_prev")
  sideBCurr     Float?   @map("side_b_curr")
  sideADelta    Float?   @map("side_a_delta")
  sideBDelta    Float?   @map("side_b_delta")
  impactHours   Float?   @map("impact_hours")
  sourceEmailId String?  @map("source_email_id")
  createdAt     DateTime @default(now()) @map("created_at")
}

model DailyLightLevel {
  id            Int      @id @default(autoincrement())
  circuit       Circuit  @relation(fields: [circuitId], references: [id])
  circuitId     Int      @map("circuit_id")
  side          String   @map("side") // 'A' or 'B'
  rx            Float?   @map("rx")
  mnemonic      String?  @map("mnemonic")
  routerName    String?  @map("router_name")
  parsedCode    String?  @map("parsed_code") // the 027... code we extract
  sourceEmailId String?  @map("source_email_id")
  sampleTime    DateTime @map("sample_time")
  createdAt     DateTime @default(now()) @map("created_at")

  @@unique([circuitId, side, sampleTime], map: "uq_daily_circuit_side_time")
  @@index([parsedCode])
  @@map("daily_light_level") 
}

// NEW ENUM
enum ManagerRole {
  manager
  engineering
}

model Manager {
  id         Int       @id @default(autoincrement())
  fullName   String    @map("full_name")    // ← map to full_name
  email      String    @unique
  password   String                             // column is already “password”
  role       ManagerRole @default(manager)
  createdAt  DateTime  @default(now()) @map("created_at")
  lastLogin  DateTime?                @map("last_login")

  @@map("Manager")   // table name stays quoted-capitalised
}