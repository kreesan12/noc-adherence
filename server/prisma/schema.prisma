generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ──────────────────────────────────────────────────────────
//  MODELS  (NEW / CHANGED lines are marked)  
// ──────────────────────────────────────────────────────────

model Agent {
  id          Int     @id @default(autoincrement())
  fullName    String
  email       String? @unique
  hash        String?
  phone       String?
  role        String?
  standbyFlag Boolean @default(false)

  shifts        Shift[]
  leaves        Leave[]                         // ← NEW
  auditEntries  AuditLog[] @relation("AgentAuditEntries")
}

model Supervisor {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String @unique
  hash     String
  role     String @default("supervisor")

  auditLogs       AuditLog[]      @relation("SupervisorAuditEntries")
  attendanceLogs  AttendanceLog[] @relation("SupervisorAttendance")
}

model Shift {
  id         Int       @id @default(autoincrement())
  agentId    Int?
  agent      Agent?    @relation(fields: [agentId], references: [id])

  shiftDate  DateTime  @db.Date
  startAt    DateTime
  endAt      DateTime

  breakStart DateTime?
  breakEnd   DateTime?

  generatedBy String?  @default("solver")

  // leave auto-flag (Feature 3)
  leaveId   Int?                                       // ← NEW
  leave     Leave?     @relation(fields: [leaveId], references: [id])

  attendance AttendanceLog?
}

model Leave {
  id          Int      @id @default(autoincrement())
  agentId     Int
  agent       Agent    @relation(fields: [agentId], references: [id])

  reason      String
  startsAt    DateTime
  endsAt      DateTime
  createdAt   DateTime @default(now())
  createdBy   String

  shifts      Shift[]                               // ← NEW
}

model Duty {
  id   Int    @id @default(autoincrement())
  name String @unique

  logs AttendanceLog[]
}

model AttendanceLog {
  id      Int   @id @default(autoincrement())
  shiftId Int   @unique
  shift   Shift @relation(fields: [shiftId], references: [id])

  status        Status    @default(pending)
  checkIn       DateTime?
  lunchStart    DateTime?
  lunchEnd      DateTime?
  overtimeStart DateTime?
  overtimeEnd   DateTime?

  dutyId       Int?
  duty         Duty?       @relation(fields: [dutyId], references: [id])

  supervisorId Int?
  supervisor   Supervisor? @relation("SupervisorAttendance", fields: [supervisorId], references: [id])
}

model VolumeForecast {
  id              Int      @id @default(autoincrement())
  role            String
  date            DateTime @db.Date
  hour            Int
  expectedCalls   Int
  expectedTickets Int
}

model VolumeActual {
  id      Int      @id @default(autoincrement())
  role    String
  date    DateTime @db.Date
  hour    Int
  calls   Int
  tickets Int
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  action      String
  actor       String
  payload     Json
  createdAt   DateTime @default(now())

  // bidirectional links – optional
  agentId      Int?                                           // ← NEW
  agent        Agent?      @relation("AgentAuditEntries",       fields: [agentId],      references: [id])

  supervisorId Int?                                           // ← NEW
  supervisor   Supervisor? @relation("SupervisorAuditEntries", fields: [supervisorId], references: [id])
}

enum Status {
  pending
  present
  late
  no_show
  off_sick
  emergency_leave
  awol
}
