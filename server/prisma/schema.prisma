generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Supervisor {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String @unique
  hash     String
  role     String @default("supervisor")

  /* NEW — one-to-many forward relation */
  agents Agent[] @relation("AgentSupervisor")

  /* existing back-relations */
  auditLogs       AuditLog[]      @relation("SupervisorAuditEntries")
  attendanceLogs  AttendanceLog[] @relation("SupervisorAttendance")

  @@map("Supervisor")
}


model Agent {
  id          Int      @id @default(autoincrement())
  fullName    String
  email       String?  @unique
  hash        String?
  phone       String?
  role        String?
  standbyFlag Boolean  @default(false)

  /* HR metadata you added earlier */
  employeeNo  String?   @map("employee_no")
  startDate   DateTime? @map("start_date")
  address     String?
  province    String?

  /* NEW — foreign-key column and relation */
  supervisorId Int?        @map("supervisor_id")
  supervisor   Supervisor? @relation("AgentSupervisor", fields: [supervisorId], references: [id])

  /* existing back-relations */
  engagements   Engagement[]
  shifts        Shift[]
  leave         Leave[]
  auditEntries  AuditLog[] @relation("AgentAuditEntries")

  @@map("Agent")
}


model Shift {
  id         Int       @id @default(autoincrement())
  agentId    Int?
  agent      Agent?    @relation(fields: [agentId], references: [id])

  shiftDate  DateTime  @db.Date
  startAt    DateTime
  endAt      DateTime

  breakStart DateTime?
  breakEnd   DateTime?

  generatedBy String?  @default("solver")

  // leave auto-flag (Feature 3)
  leaveId   Int?                                       // ← NEW
  leave     Leave?     @relation(fields: [leaveId], references: [id])

  attendance AttendanceLog?
}

model Leave {
  id          Int      @id @default(autoincrement())
  agentId     Int
  agent       Agent    @relation(fields: [agentId], references: [id])

  reason      String
  startsAt    DateTime
  endsAt      DateTime
  createdAt   DateTime @default(now())
  createdBy   String

  shifts      Shift[]                               // ← NEW
}

model Duty {
  id   Int    @id @default(autoincrement())
  name String @unique

  logs AttendanceLog[]
}

model AttendanceLog {
  id      Int   @id @default(autoincrement())
  shiftId Int   @unique
  shift   Shift @relation(fields: [shiftId], references: [id])

  status        Status    @default(pending)
  checkIn       DateTime?
  lunchStart    DateTime?
  lunchEnd      DateTime?
  overtimeStart DateTime?
  overtimeEnd   DateTime?

  dutyId       Int?
  duty         Duty?       @relation(fields: [dutyId], references: [id])

  supervisorId Int?
  supervisor   Supervisor? @relation("SupervisorAttendance", fields: [supervisorId], references: [id])
}

model VolumeForecast {
  id              Int      @id @default(autoincrement())
  role            String
  date            DateTime @db.Date
  hour            Int
  expectedCalls   Int
  expectedTickets Int
  priority1         Int      @default(0)
  autoDfaLogged     Int      @map("auto_dfa_logged")    @default(0)
  autoMntLogged     Int      @map("auto_mnt_logged")    @default(0)
  autoOutageLinked  Int      @map("auto_outage_linked") @default(0)
}

model VolumeActual {
  id      Int      @id @default(autoincrement())
  role    String
  date    DateTime @db.Date
  hour    Int
  calls   Int
  tickets Int
  priority1          Int       @default(0)
  autoDfaLogged      Int       @map("auto_dfa_logged")     @default(0)
  autoMntLogged      Int       @map("auto_mnt_logged")     @default(0)
  autoOutageLinked   Int       @map("auto_outage_linked")  @default(0)
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  action      String
  actor       String
  payload     Json
  createdAt   DateTime @default(now())

  // bidirectional links – optional
  agentId      Int?                                           // ← NEW
  agent        Agent?      @relation("AgentAuditEntries",       fields: [agentId],      references: [id])

  supervisorId Int?                                           // ← NEW
  supervisor   Supervisor? @relation("SupervisorAuditEntries", fields: [supervisorId], references: [id])
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  engagements Engagement[]
  vacancies   Vacancy[]
}

model Engagement {
  id        Int      @id @default(autoincrement())
  agentId   Int
  agent     Agent    @relation(fields:[agentId], references:[id])

  teamId    Int
  team      Team     @relation(fields:[teamId], references:[id])

  startDate DateTime           @db.Date        // first day on team
  endDate   DateTime?          @db.Date        // null means still active
  note      String?

  createdAt DateTime @default(now())

  @@index([teamId, startDate, endDate])
}

enum VacancyStatus {
  OPEN
  AWAITING_APPROVAL
  APPROVED
  INTERVIEWING
  OFFER_SENT
  OFFER_ACCEPTED
  CLOSED
}

model Vacancy {
  id        Int   @id @default(autoincrement())

  // FKs
  teamId    Int   @map("team_id")
  team      Team  @relation(fields: [teamId], references: [id])

  // Core dates
  openFrom  DateTime @map("open_from")
  closedAt  DateTime? @map("closed_at")

  // Status tracking
  status    VacancyStatus @default(OPEN)

  // Candidate offer pipeline
  candidateName    String?   @map("candidate_name")
  candidateEmail   String?   @map("candidate_email")
  offerSentAt      DateTime? @map("offer_sent_at")
  offerAcceptedAt  DateTime? @map("offer_accepted_at")
  startDate        DateTime? @map("start_date")

  // Optional free-text
  reason     String?  @db.VarChar(250)

  @@map("Vacancy")          // ← actual table name
  @@index([teamId])
  @@index([status])
  @@index([openFrom])
}

enum Status {
  pending
  present
  late
  no_show
  off_sick
  emergency_leave
  awol
}
