generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ---------- TABLES ---------- */

model Agent {
  id           Int          @id @default(autoincrement())
  fullName     String
  email        String?      @unique
  hash         String?      // password hash
  phone        String?
  role         String?      // NOC-I, NOC-II …
  standbyFlag  Boolean      @default(false)
  shifts       Shift[]
  auditEntries AuditLog[]   // 1-to-many ↔ AuditLog.actor
}

model Shift {
  id         Int           @id @default(autoincrement())
  agentId    Int?
  agent      Agent?        @relation(fields: [agentId], references: [id])
  shiftDate  DateTime      @db.Date
  startAt    DateTime
  endAt      DateTime
  attendance AttendanceLog?
}

model Duty {
  id   Int    @id @default(autoincrement())
  name String @unique
  logs AttendanceLog[]
}

model AttendanceLog {
  id            Int       @id @default(autoincrement())
  shiftId       Int       @unique
  shift         Shift     @relation(fields: [shiftId], references: [id])
  status        Status    @default(pending)
  checkIn       DateTime?
  lunchStart    DateTime?
  lunchEnd      DateTime?
  overtimeStart DateTime?
  overtimeEnd   DateTime?
  dutyId        Int?
  duty          Duty?     @relation(fields: [dutyId], references: [id])
  updatedBy     Int?
}

model VolumeForecast {
  id              Int @id @default(autoincrement())
  dayOfWeek       Int // 0-6
  hour            Int // 0-23
  expectedCalls   Int
  expectedTickets Int
}

model VolumeActual {
  id        Int @id @default(autoincrement())
  eventTime DateTime
  calls     Int
  tickets   Int
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  actorId   Int?
  actor     Agent?   @relation(fields: [actorId], references: [id])  // ← back-relation
  action    String
  table     String
  recordId  Int
  delta     Json
  ts        DateTime @default(now())
}

enum Status {
  pending
  present
  late
  no_show
}
